defmodule Eatbeep.Repo.Migrations.MigrateResources1 do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up() do
    create table(:users, primary_key: false) do
      add(:id, :text, null: true, default: nil, primary_key: true)
      add(:updated_at, :utc_datetime, null: true, default: fragment("now()"), primary_key: false)
      add(:name, :text, null: false, default: nil, primary_key: false)
      add(:hashed_password, :text, null: true, default: nil, primary_key: false)
      add(:email, :text, null: true, default: nil, primary_key: false)
    end

    create(unique_index(:users, [:email], name: "users_unique_email_unique_index"))

    alter table(:users) do
      add(:created_at, :utc_datetime, null: true, default: fragment("now()"), primary_key: false)
    end

    create table(:tenants, primary_key: false) do
      add(:id, :text, null: true, default: nil, primary_key: true)
      add(:updated_at, :utc_datetime, null: true, default: fragment("now()"), primary_key: false)
      add(:subdomain, :text, null: true, default: nil, primary_key: false)
    end

    create(unique_index(:tenants, [:subdomain], name: "tenants_unique_subdomain_unique_index"))

    alter table(:tenants) do
      add(:name, :text, null: false, default: nil, primary_key: false)
      add(:created_at, :utc_datetime, null: true, default: fragment("now()"), primary_key: false)
    end

    create table(:roles, primary_key: false) do
      add(:user_id, references("users", type: :text, column: :id), default: nil, primary_key: true)

      add(:tenant_id, references("tenants", type: :text, column: :id),
        default: nil,
        primary_key: true
      )

      add(:updated_at, :utc_datetime, null: true, default: fragment("now()"), primary_key: false)
      add(:role, :text, null: false, default: nil, primary_key: false)
      add(:created_at, :utc_datetime, null: true, default: fragment("now()"), primary_key: false)
    end
  end

  def down() do
    drop(table("roles"))

    alter table(:tenants) do
      remove(:created_at)
      remove(:name)
    end

    drop_if_exists(
      unique_index(:tenants, [:subdomain], name: "tenants_unique_subdomain_unique_index")
    )

    drop(table("tenants"))

    alter table(:users) do
      remove(:created_at)
    end

    drop_if_exists(unique_index(:users, [:email], name: "users_unique_email_unique_index"))

    drop(table("users"))
  end
end